<?xml version="1.0" encoding="iso-8859-1"?>

<!--
    Copyright 2006 Alexis Royer

    This file is part of the CLI library.

    The CLI library is free software; you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation; either version 2.1 of the License, or
    (at your option) any later version.

    Foobar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Foobar; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-->


<xsl:stylesheet
	version="1.0"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:cli="http://alexis.royer.free.fr/cli/1.0/">
	<!--xmlns:date="http://exslt.org/dates and times"-->
<xsl:output method="text" encoding="iso-8859-1"/>

<!--<xsl:include href="../docs/date.date-time/date.msxsl.xsl"/>-->


<xsl:param name="STR_VarPrefix" select="'cli_'"/>
<xsl:param name="STR_ClassPrefix" select="'Ccli'"/>
<xsl:param name="STR_Indent" select="'    '"/>



<!-- Global variables -->
<xsl:variable name="STR_Endl"><xsl:text>
</xsl:text></xsl:variable>


<!-- Root template -->
<xsl:template match="/cli:cli">
	<xsl:text>//! @file</xsl:text><xsl:value-of select="$STR_Endl"/>
	<xsl:text>//! @author climaker (Alexis Royer alexis.royer@free.fr)</xsl:text>
		<xsl:value-of select="$STR_Endl"/>
	<!--<xsl:text>//! @date </xsl:text>
		<xsl:value-of select="date:date-time()"/>
		<xsl:value-of select="$STR_Endl"/>-->
	<xsl:text>//! @warning File auto-generated by 'cppclic.xsl'. Do not edit!</xsl:text>
		<xsl:value-of select="$STR_Endl"/>
	<xsl:value-of select="$STR_Endl"/>


	<!-- Includes -->
	<xsl:call-template name="T_Include"/>
	<xsl:call-template name="T_ExtraCpp">
		<xsl:with-param name="STR_Option" select="'include'"/>
	</xsl:call-template>

	<!-- Declare menus -->
	<xsl:call-template name="T_MenuDeclaration"/>
	<xsl:call-template name="T_ExtraCpp">
		<xsl:with-param name="STR_Option" select="'menu-decl'"/>
	</xsl:call-template>

	<!-- Create CLI nodes -->
	<xsl:call-template name="T_NodeCreation"/>
	<xsl:call-template name="T_ExtraCpp">
		<xsl:with-param name="STR_Option" select="'nodes'"/>
	</xsl:call-template>

	<!-- Create CLI nodes -->
	<xsl:call-template name="T_MenuImplementation"/>
	<xsl:call-template name="T_ExtraCpp">
		<xsl:with-param name="STR_Option" select="'menu-impl'"/>
	</xsl:call-template>

</xsl:template>


<xsl:template name="T_ExtraCpp">
	<xsl:param name="STR_Option"/>

	<xsl:text>// ----- Extra cpp (option='</xsl:text>
		<xsl:value-of select="$STR_Option"/>
		<xsl:text>') -----</xsl:text>
		<xsl:value-of select="$STR_Endl"/>

	<xsl:for-each select="cli:cpp[@option=$STR_Option]">
		<xsl:apply-templates select="."/>
	</xsl:for-each>

	<xsl:value-of select="$STR_Endl"/>
</xsl:template>

<xsl:template name="T_Include">
	<xsl:text>// ----- Includes -----</xsl:text><xsl:value-of select="$STR_Endl"/>
	<xsl:text>#include &lt;cli_common.h&gt;</xsl:text>
	<xsl:value-of select="$STR_Endl"/>
</xsl:template>

<xsl:template name="T_MenuDeclaration">
	<xsl:text>// ----- Menu declaration -----</xsl:text>
		<xsl:value-of select="$STR_Endl"/>

	<xsl:for-each select="/cli:cli">
		<xsl:call-template name="T_DeclareMenu">
			<xsl:with-param name="STR_SuperClass" select="'CcliCli'"/>
		</xsl:call-template>
	</xsl:for-each>
	<xsl:for-each select="//cli:menu[@name and not(@ref)]">
		<xsl:call-template name="T_DeclareMenu">
			<xsl:with-param name="STR_SuperClass" select="'CcliMenu'"/>
		</xsl:call-template>
	</xsl:for-each>

	<xsl:value-of select="$STR_Endl"/>
</xsl:template>

	<xsl:template name="T_DeclareMenu">
		<xsl:param name="STR_SuperClass"/>
		<xsl:variable name="STR_Class">
			<xsl:call-template name="T_Node2Class"/>
		</xsl:variable>

		<xsl:text>class </xsl:text>
			<xsl:value-of select="$STR_Class"/>
			<xsl:text> : public </xsl:text>
			<xsl:value-of select="$STR_SuperClass"/>
			<xsl:text> </xsl:text>
		<xsl:text>{</xsl:text>
			<xsl:value-of select="$STR_Endl"/>
		<xsl:text>public:</xsl:text>
			<xsl:value-of select="$STR_Endl"/>

		<!-- Constructor -->
		<xsl:value-of select="$STR_Indent"/>
			<xsl:value-of select="$STR_Class"/>
			<xsl:text>(</xsl:text>
				<xsl:text>const std::string&amp; STR_Name, </xsl:text>
				<xsl:text>const CcliHelp&amp; CLI_Help</xsl:text>
			<xsl:text>);</xsl:text>
			<xsl:value-of select="$STR_Endl"/>

		<!-- Destructor -->
		<xsl:value-of select="$STR_Indent"/>
			<xsl:text>virtual ~</xsl:text>
			<xsl:value-of select="$STR_Class"/>
			<xsl:text>(void);</xsl:text>
			<xsl:value-of select="$STR_Endl"/>

		<!-- Execution method -->
		<xsl:value-of select="$STR_Indent"/>
			<xsl:text>virtual bool Execute(</xsl:text>
				<xsl:text>const CcliCommandLine&amp; CLI_CmdLine</xsl:text>
			<xsl:text>) const;</xsl:text>
			<xsl:value-of select="$STR_Endl"/>

		<!-- Exit method -->
		<xsl:value-of select="$STR_Indent"/>
			<xsl:text>virtual void OnExit(void) const;</xsl:text>
			<xsl:value-of select="$STR_Endl"/>

		<xsl:text>};</xsl:text>
			<xsl:value-of select="$STR_Endl"/>
	</xsl:template>

<xsl:template name="T_NodeCreation">
	<xsl:variable name="STR_Class"><xsl:call-template name="T_Node2Class"/></xsl:variable>
	<xsl:variable name="STR_Var"><xsl:call-template name="T_Node2Var"/></xsl:variable>

	<xsl:text>// ----- Node creation -----</xsl:text>
		<xsl:value-of select="$STR_Endl"/>

	<!-- CLI object creation -->
	<xsl:value-of select="$STR_Class"/>
		<xsl:text> </xsl:text>
		<xsl:value-of select="$STR_Var"/>
		<xsl:text>(</xsl:text>
			<xsl:call-template name="T_CreateNodeParams"/>
		<xsl:text>);</xsl:text>
		<xsl:value-of select="$STR_Endl"/>

	<xsl:if test="@cpp">
		<xsl:text>CcliCli* </xsl:text>
			<xsl:value-of select="@cpp"/>
			<xsl:text> = &amp; </xsl:text>
			<xsl:value-of select="$STR_Var"/>
			<xsl:text>;</xsl:text>
			<xsl:value-of select="$STR_Endl"/>
	</xsl:if>

	<!-- Sub-nodes -->
	<xsl:call-template name="T_CreateSubNodes">
		<xsl:with-param name="I_IndentCount" select="1"/>
	</xsl:call-template>

	<!-- References -->
	<xsl:text>// ----- References -----</xsl:text>
		<xsl:value-of select="$STR_Endl"/>

	<xsl:for-each select="//cli:menu[@ref]"><xsl:call-template name="T_CreateNode"/></xsl:for-each>
	<xsl:for-each select="//cli:tag[@ref]"><xsl:call-template name="T_CreateNode"/></xsl:for-each>

	<xsl:value-of select="$STR_Endl"/>
</xsl:template>

	<xsl:template name="T_CreateSubNodes">
		<xsl:param name="I_IndentCount" select="0"/>

		<xsl:for-each select="cli:*">
		<xsl:if test="  not(self::cli:help)
		                and not(self::cli:cpp)
		                and not(self::cli:handler)
		                and not(self::cli:menu[@ref])
				and not(self::cli:tag[@ref])">
			<xsl:call-template name="T_CreateNode">
				<xsl:with-param name="I_IndentCount" select="$I_IndentCount"/>
			</xsl:call-template>
			<xsl:call-template name="T_CreateSubNodes">
				<xsl:with-param name="I_IndentCount" select="$I_IndentCount + 1"/>
			</xsl:call-template>
		</xsl:if>
		</xsl:for-each>
	</xsl:template>

	<xsl:template name="T_CreateNode">
		<xsl:param name="I_IndentCount" select="0"/>
		<xsl:variable name="STR_Class">
			<xsl:call-template name="T_Node2Class"/>
		</xsl:variable>
		<xsl:variable name="STR_Var">
			<xsl:call-template name="T_Node2Var"/>
		</xsl:variable>
		<xsl:variable name="STR_ParentVar">
			<xsl:for-each select="parent::cli:*">
				<xsl:call-template name="T_Node2Var"/>
			</xsl:for-each>
		</xsl:variable>
		<xsl:variable name="STR_Indent">
			<xsl:call-template name="T_Indent">
				<xsl:with-param name="I_IndentCount" select="$I_IndentCount"/>
			</xsl:call-template>
		</xsl:variable>

		<xsl:value-of select="$STR_Indent"/>
			<xsl:value-of select="$STR_Class"/>
			<xsl:text>&amp; </xsl:text>
			<xsl:value-of select="$STR_Var"/>
			<xsl:text> = dynamic_cast&lt;</xsl:text>
			<xsl:value-of select="$STR_Class"/>
			<xsl:text>&amp;&gt;(</xsl:text>
				<xsl:value-of select="$STR_ParentVar"/>
				<xsl:choose>
				<xsl:when test="parent::cli:endl and self::cli:menu[@name]">
					<xsl:text>.SetMenu(</xsl:text>
				</xsl:when>
				<xsl:when test="parent::cli:endl and self::cli:menu[@ref]">
					<xsl:text>.SetMenuRef(</xsl:text>
				</xsl:when>
				<xsl:when test="parent::cli:cli and self::cli:menu[@name]">
					<xsl:text>.AddMenu(</xsl:text>
				</xsl:when>
				<xsl:otherwise>
					<xsl:text>.AddElement(</xsl:text>
				</xsl:otherwise>
				</xsl:choose>
					<xsl:text>new </xsl:text>
					<xsl:value-of select="$STR_Class"/>
					<xsl:text>(</xsl:text>
						<xsl:call-template name="T_CreateNodeParams"/>
					<xsl:text>)</xsl:text>
				<xsl:text>)</xsl:text>
			<xsl:text>);</xsl:text>
			<xsl:value-of select="$STR_Endl"/>
			<xsl:if test="@cpp">
				<xsl:value-of select="$STR_Indent"/>
					<xsl:value-of select="$STR_Class"/>
					<xsl:text>* </xsl:text>
					<xsl:value-of select="@cpp"/>
					<xsl:text> = &amp; </xsl:text>
					<xsl:value-of select="$STR_Var"/>
					<xsl:text>;</xsl:text>
					<xsl:value-of select="$STR_Endl"/>
			</xsl:if>

	</xsl:template>

	<xsl:template name="T_CreateNodeParams">
		<xsl:variable name="STR_ElementRef">
			<xsl:choose>
			<xsl:when test="self::cli:tag[@ref]">
				<xsl:variable name="STR_Tag" select="@ref"/>
				<xsl:for-each select="ancestor::cli:tag[@id=$STR_Tag]">
					<xsl:call-template name="T_Node2Var"/>
				</xsl:for-each>
			</xsl:when>
			<xsl:when test="self::cli:menu[@ref]">
				<xsl:variable name="STR_Menu" select="@ref"/>
				<xsl:for-each select="//cli:menu[@name=$STR_Menu]">
					<xsl:call-template name="T_Node2Var"/>
				</xsl:for-each>
			</xsl:when>
			</xsl:choose>
        	</xsl:variable>
		<xsl:variable name="B_ElementRef" select="string-length($STR_ElementRef)"/>
		<xsl:variable name="STR_Keyword">
			<xsl:choose>
			<xsl:when test="self::cli:cli or self::cli:menu">
				<xsl:value-of select="@name"/>
			</xsl:when>
			<xsl:when test="self::cli:keyword">
				<xsl:value-of select="@string"/>
			</xsl:when>
			</xsl:choose>
		</xsl:variable>
		<xsl:variable name="B_Keyword" select="string-length($STR_Keyword)"/>
		<xsl:variable name="B_Help">
			<xsl:choose>
			<xsl:when test="self::cli:tag">0</xsl:when>
			<xsl:when test="self::cli:menu[@ref]">0</xsl:when>
			<xsl:otherwise>1</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>

		<xsl:choose>
		<xsl:when test="not($B_ElementRef=0)">
			<xsl:value-of select="$STR_ElementRef"/>
		</xsl:when>
		<xsl:otherwise>
			<xsl:if test="not($B_Keyword=0)">
                		<xsl:text>"</xsl:text>
				<xsl:value-of select="$STR_Keyword"/>
				<xsl:text>"</xsl:text>
			</xsl:if>
			<xsl:if test="$B_Keyword and $B_Help">
				<xsl:text>, </xsl:text>
			</xsl:if>
			<xsl:if test="not($B_Help=0)">
				<xsl:text>CcliHelp()</xsl:text>
				<xsl:for-each select="cli:help">
					<xsl:variable name="STR_Lang">
						<xsl:choose>
						<xsl:when test="@lang='en'">
							<xsl:text>CcliHelp::CLI_LANG_EN</xsl:text>
						</xsl:when>
						<xsl:when test="@lang='fr'">
							<xsl:text>CcliHelp::CLI_LANG_FR</xsl:text>
						</xsl:when>
						</xsl:choose>                    
					</xsl:variable>

					<xsl:if test="string-length($STR_Lang) &gt; 0">
						<xsl:text>.AddHelp(</xsl:text>
							<xsl:value-of select="$STR_Lang"/>
							<xsl:text>, </xsl:text>
							<xsl:text>"</xsl:text>
							<xsl:value-of select="."/>
							<xsl:text>"</xsl:text>
						<xsl:text>)</xsl:text>
					</xsl:if>
				</xsl:for-each>
			</xsl:if>
		</xsl:otherwise>
		</xsl:choose>
	</xsl:template>


<xsl:template name="T_MenuImplementation">
	<xsl:text>// ----- Menu implementation -----</xsl:text>
		<xsl:value-of select="$STR_Endl"/>

	<xsl:for-each select="/cli:cli">
		<xsl:call-template name="T_ImplementMenu">
			<xsl:with-param name="STR_ParentClass" select="'CcliCli'"/>
		</xsl:call-template>
	</xsl:for-each>
	<xsl:for-each select="//cli:menu[@name]">
		<xsl:call-template name="T_ImplementMenu">
			<xsl:with-param name="STR_ParentClass" select="'CcliMenu'"/>
		</xsl:call-template>
	</xsl:for-each>

	<xsl:value-of select="$STR_Endl"/>
</xsl:template>

	<xsl:template name="T_ImplementMenu">
		<xsl:param name="STR_ParentClass"/>
		<xsl:variable name="STR_Class">
			<xsl:call-template name="T_Node2Class"/>
		</xsl:variable>

		<!-- Constructor -->
		<xsl:value-of select="$STR_Class"/>
			<xsl:text>::</xsl:text>
			<xsl:value-of select="$STR_Class"/>
			<xsl:text>(</xsl:text>
				<xsl:text>const std::string&amp; STR_Name, </xsl:text>
				<xsl:text>const CcliHelp&amp; CLI_Help</xsl:text>
			<xsl:text>)</xsl:text>
		<xsl:text> : </xsl:text>
			<xsl:value-of select="$STR_ParentClass"/>
			<xsl:text>(</xsl:text>
				<xsl:text>STR_Name, </xsl:text>
				<xsl:text>CLI_Help</xsl:text>
			<xsl:text>) </xsl:text>
		<xsl:text>{</xsl:text><xsl:value-of select="$STR_Endl"/>
		<xsl:text>}</xsl:text><xsl:value-of select="$STR_Endl"/>

		<!-- Destructor -->
		<xsl:value-of select="$STR_Class"/>
			<xsl:text>::~</xsl:text>
			<xsl:value-of select="$STR_Class"/>
			<xsl:text>(void) </xsl:text>
		<xsl:text>{</xsl:text><xsl:value-of select="$STR_Endl"/>
		<xsl:text>}</xsl:text><xsl:value-of select="$STR_Endl"/>

		<!-- Execution method -->
		<xsl:text>bool </xsl:text>
			<xsl:value-of select="$STR_Class"/>
			<xsl:text>::Execute(</xsl:text>
				<xsl:text>const CcliCommandLine&amp; CLI_CmdLine</xsl:text>
			<xsl:text>) const </xsl:text>
		<xsl:text>{</xsl:text><xsl:value-of select="$STR_Endl"/>

			<!-- Step variables -->
			<xsl:value-of select="$STR_Indent"/>
				<xsl:text>int i_CmdLineIndex = 0;</xsl:text>
				<xsl:value-of select="$STR_Endl"/>
			<xsl:value-of select="$STR_Indent"/>
				<xsl:text>const CcliElement* pcli_Element = NULL;</xsl:text>
				<xsl:value-of select="$STR_Endl"/>

			<!-- Step It macro -->
			<xsl:value-of select="$STR_Indent"/>
			<xsl:text>#define CLI_STEP_IT() </xsl:text>
			<xsl:text>do { </xsl:text>
			<xsl:text>if (i_CmdLineIndex >= CLI_CmdLine.GetElementCount()) </xsl:text>
				<xsl:text>return false; </xsl:text>
			<xsl:text>pcli_Element = &amp; CLI_CmdLine[i_CmdLineIndex++]; </xsl:text>
			<xsl:text>} while(0)</xsl:text>
			<xsl:value-of select="$STR_Endl"/>

			<!-- Call implementation on the menu object -->
			<xsl:call-template name="T_ImplementMenuExecution">
				<xsl:with-param name="I_IndentCount" select="1"/>
			</xsl:call-template>

			<!-- Finishing -->
			<xsl:value-of select="$STR_Indent"/>
			<xsl:text>#undef CLI_STEP_IT</xsl:text>
			<xsl:value-of select="$STR_Endl"/>

		<xsl:text>}</xsl:text><xsl:value-of select="$STR_Endl"/>

		<!-- Exit handler -->
		<xsl:text>void </xsl:text>
			<xsl:value-of select="$STR_Class"/>
			<xsl:text>::OnExit(void) const </xsl:text>
		<xsl:text>{</xsl:text><xsl:value-of select="$STR_Endl"/>

			<xsl:for-each select="cli:handler[@name='exit']">
				<xsl:value-of select="$STR_Indent"/>
				<xsl:apply-templates select="."/>
			</xsl:for-each>

		<xsl:text>}</xsl:text><xsl:value-of select="$STR_Endl"/>
	</xsl:template>

	<xsl:template name="T_ImplementMenuExecution">
		<xsl:param name="I_IndentCount" select="0"/>
		<xsl:variable name="STR_Indent0">
			<xsl:call-template name="T_Indent">
				<xsl:with-param name="I_IndentCount" select="$I_IndentCount + 0"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="STR_Indent1">
			<xsl:call-template name="T_Indent">
				<xsl:with-param name="I_IndentCount" select="$I_IndentCount + 1"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:variable name="STR_Indent2">
			<xsl:call-template name="T_Indent">
				<xsl:with-param name="I_IndentCount" select="$I_IndentCount + 2"/>
			</xsl:call-template>
		</xsl:variable>

		<!-- Start the block -->
		<xsl:choose>
		<xsl:when test="self::cli:cli or self::cli:menu or self::cli:tag">
			<xsl:value-of select="$STR_Indent0"/>
			<xsl:text>{</xsl:text>
				<xsl:value-of select="$STR_Endl"/>
		</xsl:when>
		<xsl:when test="self::cli:param">
			<xsl:value-of select="$STR_Indent0"/>
			<xsl:text>if (</xsl:text>
				<xsl:text>const CcliParam* pcli_Param = </xsl:text>
				<xsl:text>dynamic_cast&lt;const CcliParam*&gt;(</xsl:text>
					<xsl:text>pcli_Element</xsl:text>
				<xsl:text>)</xsl:text>
			<xsl:text>)</xsl:text>
				<xsl:value-of select="$STR_Endl"/>
			<xsl:value-of select="$STR_Indent0"/>
			<xsl:text>if (</xsl:text>
				<xsl:text>pcli_Param->GetCloned()</xsl:text>
				<xsl:text> == </xsl:text>
				<xsl:text>&amp; </xsl:text>
				<xsl:call-template name="T_Node2Var"/>
			<xsl:text>) {</xsl:text>
				<xsl:value-of select="$STR_Endl"/>
		</xsl:when>
		<xsl:otherwise>
			<xsl:value-of select="$STR_Indent0"/>
			<xsl:text>if (</xsl:text>
				<xsl:text>pcli_Element</xsl:text>
				<xsl:text> == </xsl:text>
				<xsl:text>&amp; </xsl:text>
				<xsl:call-template name="T_Node2Var"/>
			<xsl:text>) {</xsl:text>
				<xsl:value-of select="$STR_Endl"/>
		</xsl:otherwise>
		</xsl:choose>

		<!-- Top label -->
		<xsl:choose>
		<xsl:when test="self::cli:tag[@id]">
			<xsl:value-of select="$STR_Indent1"/>
				<xsl:text>int i = 0;</xsl:text>
				<xsl:value-of select="$STR_Endl"/>
			<xsl:value-of select="$STR_Indent1"/>
				<xsl:call-template name="T_Node2TopLabel"/>
				<xsl:text>:</xsl:text>
				<xsl:value-of select="$STR_Endl"/>
			<xsl:value-of select="$STR_Indent1"/>
				<xsl:text>i ++;</xsl:text>
				<xsl:value-of select="$STR_Endl"/>
		</xsl:when>
		<xsl:when test="self::cli:param">
			<xsl:value-of select="$STR_Indent1"/>
				<xsl:call-template name="T_Node2TopLabel"/>
				<xsl:text>:</xsl:text>
				<xsl:value-of select="$STR_Endl"/>
			<xsl:value-of select="$STR_Indent1"/>
				<xsl:text>pcli_Param = </xsl:text>
				<xsl:text>dynamic_cast&lt;const CcliParam*&gt;(</xsl:text>
					<xsl:text>pcli_Element</xsl:text>
				<xsl:text>);</xsl:text>
				<xsl:value-of select="$STR_Endl"/>
			<xsl:value-of select="$STR_Indent1"/>
				<xsl:call-template name="T_Node2Var"/>
				<xsl:text>.CopyValue(</xsl:text>
				<xsl:text>*pcli_Param</xsl:text>
				<xsl:text>);</xsl:text>
				<xsl:value-of select="$STR_Endl"/>
		</xsl:when>
		<xsl:otherwise>
			<xsl:value-of select="$STR_Indent1"/>
				<xsl:call-template name="T_Node2TopLabel"/>
				<xsl:text>:</xsl:text>
				<xsl:value-of select="$STR_Endl"/>
		</xsl:otherwise>
		</xsl:choose>

		<!-- Step it -->
		<xsl:if test="not(self::cli:tag or self::cli:endl)">
			<xsl:value-of select="$STR_Indent1"/>
				<xsl:text>CLI_STEP_IT();</xsl:text>
				<xsl:value-of select="$STR_Endl"/>
		</xsl:if>

		<!-- Execution -->
		<xsl:for-each select="cli:cpp[not(@*)]">
			<xsl:value-of select="$STR_Indent1"/>
				<xsl:apply-templates select="."/>
				<xsl:value-of select="$STR_Endl"/>
		</xsl:for-each>

		<!-- Sub-elements -->
		<xsl:choose>
		<xsl:when test="self::cli:endl">
			<xsl:value-of select="$STR_Indent1"/>
				<xsl:text>return true;</xsl:text>
				<xsl:value-of select="$STR_Endl"/>
		</xsl:when>
		<xsl:when test="self::cli:tag[@ref]">
			<xsl:variable name="STR_Tag" select="@ref"/>
			<xsl:for-each select="ancestor::cli:tag[@id=$STR_Tag]">
				<xsl:for-each select="cli:keyword|cli:tag|cli:endl">
					<xsl:value-of select="$STR_Indent1"/>
						<xsl:text>if (</xsl:text>
							<xsl:text>pcli_Element</xsl:text>
							<xsl:text> == </xsl:text>
							<xsl:text>&amp; </xsl:text>
							<xsl:call-template name="T_Node2Var"/>
						<xsl:text>) </xsl:text>
					<xsl:text>goto </xsl:text>
						<xsl:call-template name="T_Node2TopLabel"/>
						<xsl:text>;</xsl:text>
						<xsl:value-of select="$STR_Endl"/>
				</xsl:for-each>
				<xsl:for-each select="cli:param">
					<xsl:value-of select="$STR_Indent1"/>
					<xsl:text>if (</xsl:text>
						<xsl:text>const CcliParam* pcli_Param </xsl:text>
						<xsl:text>= dynamic_cast&lt;const CcliParam*&gt;(</xsl:text>
							<xsl:text>pcli_Element</xsl:text>
						<xsl:text>)</xsl:text>
					<xsl:text>)</xsl:text>
						<xsl:value-of select="$STR_Endl"/>	
					<xsl:value-of select="$STR_Indent1"/>
					<xsl:text>if (</xsl:text>
						<xsl:text>pcli_Param-&gt;GetCloned()</xsl:text>
						<xsl:text> == </xsl:text>
						<xsl:text>&amp; </xsl:text>
						<xsl:call-template name="T_Node2Var"/>
					<xsl:text>) </xsl:text>
					<xsl:text>goto </xsl:text>
						<xsl:call-template name="T_Node2TopLabel"/>
						<xsl:text>;</xsl:text>
						<xsl:value-of select="$STR_Endl"/>
				</xsl:for-each>
			</xsl:for-each>
		</xsl:when>
		<xsl:otherwise>
			<xsl:for-each select="cli:keyword|cli:param|cli:tag|cli:endl">
				<!-- Recursive call -->
				<xsl:call-template name="T_ImplementMenuExecution">
					<xsl:with-param
						name="I_IndentCount"
						select="$I_IndentCount + 1"/>
				</xsl:call-template>
			</xsl:for-each>
		</xsl:otherwise>
		</xsl:choose>

		<!-- End label -->
		<!--<xsl:value-of select="$STR_Indent1"/>
			<xsl:call-template name="T_Node2EndLabel"/>
			<xsl:text>:</xsl:text>
			<xsl:value-of select="$STR_Endl"/>-->

		<!-- Final jump -->
		<xsl:choose>
		<xsl:when test="self::cli:tag[@id]">
			<xsl:value-of select="$STR_Indent1"/>
			<xsl:text>if (i != 1) </xsl:text>
				<xsl:text>return false;</xsl:text>
				<xsl:value-of select="$STR_Endl"/>
		</xsl:when>
		<xsl:when test="self::cli:endl">
		</xsl:when>
		<xsl:otherwise>
			<xsl:value-of select="$STR_Indent1"/>
				<xsl:text>return false;</xsl:text>
				<xsl:value-of select="$STR_Endl"/>
		</xsl:otherwise>
		</xsl:choose>

		<!-- End the block -->
		<xsl:value-of select="$STR_Indent0"/>
			<xsl:text>}</xsl:text>
			<xsl:value-of select="$STR_Endl"/>

	</xsl:template>

<xsl:template name="T_Node2Var">
	<!-- variable prefix -->
	<xsl:value-of select="$STR_VarPrefix"/>

	<!-- element type -->
	<xsl:choose>
	<xsl:when test="self::cli:tag[@ref]"><xsl:text>tagref</xsl:text></xsl:when>
	<xsl:when test="self::cli:menu[@ref]"><xsl:text>menuref</xsl:text></xsl:when>
	<xsl:otherwise><xsl:value-of select="local-name(.)"/></xsl:otherwise>
	</xsl:choose>

	<!-- element name -->
	<xsl:choose>
	<xsl:when test="self::cli:cli or self::cli:menu[@name]">
		<xsl:text>_</xsl:text>
		<xsl:value-of select="translate(@name,'-','_')"/>
	</xsl:when>
	<xsl:when test="self::cli:keyword">
		<xsl:text>_</xsl:text>
		<xsl:value-of select="translate(@string,'-','_')"/>
	</xsl:when>
	<xsl:when test="self::cli:param">
		<xsl:text>_</xsl:text>
		<xsl:value-of select="translate(@id,'-','_')"/>
	</xsl:when>
	</xsl:choose>

	<!-- id -->
	<xsl:text>_</xsl:text>
	<xsl:value-of select="generate-id(.)"/>
</xsl:template>

<xsl:template name="T_Node2Class">
	<xsl:choose>
	<xsl:when test="self::cli:cli or self::cli:menu[@name]">
		<xsl:value-of select="$STR_ClassPrefix"/>
		<xsl:choose>
		<xsl:when test="self::cli:cli"><xsl:text>Cli</xsl:text></xsl:when>
		<xsl:when test="self::cli:menu"><xsl:text>Menu</xsl:text></xsl:when>
		</xsl:choose>
		<xsl:text>_</xsl:text>
		<xsl:value-of select="translate(@name, '-', '_')"/>
	</xsl:when>
	<xsl:when test="self::cli:keyword"><xsl:text>CcliKeyword</xsl:text></xsl:when>
	<xsl:when test="self::cli:param">
		<xsl:choose>
		<xsl:when test="@type='string'"><xsl:text>CcliParamString</xsl:text></xsl:when>
		<xsl:when test="@type='int'"><xsl:text>CcliParamInt</xsl:text></xsl:when>
		<xsl:when test="@type='float'"><xsl:text>CcliParamFloat</xsl:text></xsl:when>
		<xsl:when test="@type='host'"><xsl:text>CcliParamHost</xsl:text></xsl:when>
		<xsl:when test="not(@type)">
			<xsl:text>#error[missing @type attribute]</xsl:text>
		</xsl:when>
		<xsl:otherwise>
			<xsl:text>#error[unknown param type '</xsl:text>
			<xsl:value-of select="@type"/>
			<xsl:text>']</xsl:text>
		</xsl:otherwise>
		</xsl:choose>
	</xsl:when>
	<xsl:when test="self::cli:endl"><xsl:text>CcliEndl</xsl:text></xsl:when>
	<xsl:when test="self::cli:tag[@id]"><xsl:text>CcliSyntaxTag</xsl:text></xsl:when>
	<xsl:when test="self::cli:tag[@ref]"><xsl:text>CcliSyntaxRef</xsl:text></xsl:when>
	<xsl:when test="self::cli:menu[@ref]"><xsl:text>CcliMenuRef</xsl:text></xsl:when>
	<xsl:otherwise>
		<xsl:text>#error[unknown cli-node '</xsl:text>
		<xsl:value-of select="local-name(.)"/>
		<xsl:text>']</xsl:text>
	</xsl:otherwise>
	</xsl:choose>
</xsl:template>

<xsl:template name="T_Node2TopLabel">
	<xsl:call-template name="T_Node2Var"/>
	<xsl:text>_top</xsl:text>
</xsl:template>

<xsl:template name="T_Node2EndLabel">
	<xsl:call-template name="T_Node2Var"/>
	<xsl:text>_end</xsl:text>
</xsl:template>

<xsl:template name="T_Indent">
	<xsl:param name="I_IndentCount" select="0"/>

	<xsl:if test="$I_IndentCount &gt; 0">
		<xsl:value-of select="$STR_Indent"/>
		<xsl:call-template name="T_Indent">
			<xsl:with-param name="I_IndentCount" select="$I_IndentCount - 1"/>
		</xsl:call-template>
	</xsl:if>
</xsl:template>

<xsl:template match="cli:cpp">
	<xsl:apply-templates/>
	<xsl:value-of select="$STR_Endl"/>
</xsl:template>

<xsl:template match="cli:value-of">
	<xsl:variable name="STR_Param" select="@param"/>
	<xsl:for-each select="ancestor::cli:param[@id=$STR_Param]">
		<xsl:call-template name="T_Node2Var"/>
	</xsl:for-each>
</xsl:template>
<xsl:template match="cli:out">
	<xsl:text>GetOutputStream()</xsl:text>
</xsl:template>

<xsl:template match="cli:value-of[@param]">
	<xsl:variable name="STR_Param" select="@param"/>
	<xsl:for-each select="ancestor::cli:param[@id=$STR_Param][position()=1]">
		<xsl:call-template name="T_Node2Var"/>
	</xsl:for-each>
</xsl:template>

</xsl:stylesheet>

