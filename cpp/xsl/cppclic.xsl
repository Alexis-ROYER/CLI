<?xml version="1.0" encoding="iso-8859-1"?>

<!--
    Copyright (c) 2006-2007, Alexis Royer

    All rights reserved.

    Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

        * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
        * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
        * Neither the name of the CLI library project nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
    LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->


<xsl:stylesheet
    version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:cli="http://alexis.royer.free.fr/CLI">
    <!--xmlns:date="http://exslt.org/dates and times"-->
<xsl:output method="text" encoding="iso-8859-1"/>

<!--<xsl:include href="../docs/date.date-time/date.msxsl.xsl"/>-->


<!-- CLI static creation -->
<xsl:param name="B_CliStaticCreation" select="1"/>
<!-- Variables prefix -->
<xsl:param name="STR_VarPrefix" select="'m_pcli_'"/>
<!-- Classes prefix -->
<xsl:param name="STR_ClassPrefix" select="''"/>
<!-- Indentation -->
<xsl:param name="STR_Indent" select="'    '"/>
<!-- CLI class name -->
<xsl:param name="STR_CliClassName">
    <xsl:value-of select="$STR_ClassPrefix"/>
    <xsl:call-template name="T_MkCppName">
        <xsl:with-param name="STR_String" select="/cli:cli/@name"/>
    </xsl:call-template>
</xsl:param>



<!-- Global variables -->
<xsl:variable name="STR_Endl"><xsl:text>
</xsl:text></xsl:variable>


<!-- Root template -->
<xsl:template match="/cli:cli">
    <xsl:text>//! @file</xsl:text><xsl:value-of select="$STR_Endl"/>
    <xsl:text>//! @author cppclic.xsl - CLI library (Alexis Royer, alexis.royer@gmail.com)</xsl:text><xsl:value-of select="$STR_Endl"/>
    <!--<xsl:text>//! @date </xsl:text>
        <xsl:value-of select="date:date-time()"/>
        <xsl:value-of select="$STR_Endl"/>-->
    <xsl:text>//! @warning File auto-generated by 'cppclic.xsl'. Do not edit!</xsl:text><xsl:value-of select="$STR_Endl"/>
    <xsl:value-of select="$STR_Endl"/>


    <!-- Head section -->
    <xsl:call-template name="T_ExtraCpp">
        <xsl:with-param name="STR_Option" select="'head'"/>
    </xsl:call-template>

    <xsl:call-template name="T_Include"/>

    <!-- Include section -->
    <xsl:call-template name="T_ExtraCpp">
        <xsl:with-param name="STR_Option" select="'include'"/>
    </xsl:call-template>

    <xsl:call-template name="T_MenuDeclaration"/>

    <!-- Types section -->
    <xsl:call-template name="T_ExtraCpp">
        <xsl:with-param name="STR_Option" select="'types'"/>
    </xsl:call-template>

    <xsl:call-template name="T_NodeCreation"/>

    <!-- Vars section -->
    <xsl:text>static const cli::TraceClass CLI_EXECUTION(</xsl:text>
        <xsl:text>"CLI_EXECUTION", </xsl:text>
        <xsl:text>cli::Help()</xsl:text>
            <xsl:text>.AddHelp(cli::Help::LANG_EN, "CLI Execution traces")</xsl:text>
            <xsl:text>.AddHelp(cli::Help::LANG_FR, "Traces d'exécution du CLI")</xsl:text>
    <xsl:text>);</xsl:text>
    <xsl:call-template name="T_ExtraCpp">
        <xsl:with-param name="STR_Option" select="'vars'"/>
    </xsl:call-template>

    <!--<xsl:call-template name="T_MenuImplementation"/>-->

    <!-- Body section -->
    <xsl:call-template name="T_ExtraCpp">
        <xsl:with-param name="STR_Option" select="'body'"/>
    </xsl:call-template>

    <!-- Tail section -->
    <xsl:call-template name="T_ExtraCpp">
        <xsl:with-param name="STR_Option" select="'tail'"/>
    </xsl:call-template>

</xsl:template>


<xsl:template name="T_ExtraCpp">
    <xsl:param name="STR_Option"/>

    <xsl:text>// ----- Extra cpp (option='</xsl:text>
        <xsl:value-of select="$STR_Option"/>
        <xsl:text>') -----</xsl:text>
        <xsl:value-of select="$STR_Endl"/>

    <xsl:for-each select="cli:cpp[@option=$STR_Option]">
        <xsl:apply-templates select="."/>
    </xsl:for-each>

    <xsl:value-of select="$STR_Endl"/>
</xsl:template>

<xsl:template name="T_Include">
    <xsl:text>// ----- Includes -----</xsl:text><xsl:value-of select="$STR_Endl"/>
    <xsl:text>#include &lt;cli/common.h&gt;</xsl:text><xsl:value-of select="$STR_Endl"/>
    <xsl:value-of select="$STR_Endl"/>
</xsl:template>

<xsl:template name="T_MenuDeclaration">
    <xsl:variable name="STR_ClassName">
        <xsl:call-template name="T_Node2Class"/>
    </xsl:variable>
    <xsl:variable name="STR_SuperClass">
        <xsl:choose>
        <xsl:when test="self::cli:cli">cli::Cli</xsl:when>
        <xsl:otherwise>cli::Menu</xsl:otherwise>
        </xsl:choose>
    </xsl:variable>

    <xsl:call-template name="T_Indent0"/>
        <xsl:text>class </xsl:text><xsl:value-of select="$STR_ClassName"/>
        <xsl:text> : public </xsl:text><xsl:value-of select="$STR_SuperClass"/>
        <xsl:text> {</xsl:text><xsl:value-of select="$STR_Endl"/>

        <!-- Sub-menus at root only. -->
        <xsl:call-template name="T_MenuSubMenus"/>

        <!-- Node declarations. -->
        <xsl:call-template name="T_MenuMembers"/>

        <!-- Constructor -->
        <xsl:call-template name="T_MenuConstructor"/>

        <!-- Destructor. -->
        <xsl:call-template name="T_MenuDestructor"/>

        <!-- Populating nodes. -->
        <xsl:call-template name="T_MenuPopulate"/>

        <!-- Menu implementation. -->
        <xsl:call-template name="T_MenuExecute"/>

        <!-- Menu handlers. -->
        <xsl:call-template name="T_MenuHandlers"/>

    <xsl:call-template name="T_Indent0"/>
        <xsl:text>};</xsl:text><xsl:value-of select="$STR_Endl"/>

</xsl:template>

<xsl:template name="T_MenuSubMenus">
    <xsl:if test="self::cli:cli">
        <xsl:call-template name="T_Indent1"/>
            <xsl:text>// ----- Sub-menus -----</xsl:text>
            <xsl:value-of select="$STR_Endl"/>
        <xsl:for-each select=".//cli:menu[not(@ref)]">
            <xsl:call-template name="T_MenuDeclaration" select="."/>
            <xsl:value-of select="$STR_Endl"/>
        </xsl:for-each>
        <xsl:value-of select="$STR_Endl"/>
    </xsl:if>
</xsl:template>

<xsl:template name="T_MenuMembers">
    <xsl:variable name="STR_Class"><xsl:call-template name="T_Node2Class"/></xsl:variable>
    <xsl:variable name="STR_Var"><xsl:call-template name="T_Node2Var"/></xsl:variable>
    <xsl:variable name="I_IndentOffset"><xsl:call-template name="T_IndentOffset"/></xsl:variable>

    <xsl:call-template name="T_Indent1"/>
        <xsl:text>// ----- Node members -----</xsl:text>
        <xsl:value-of select="$STR_Endl"/>

    <!-- Self -->
    <xsl:call-template name="T_Indent1"/>
        <xsl:text>private: </xsl:text>
        <xsl:choose>
        <xsl:when test="self::cli:cli"><xsl:text>cli::Cli</xsl:text></xsl:when>
        <xsl:when test="self::cli:menu"><xsl:text>cli::Menu</xsl:text></xsl:when>
        </xsl:choose>
        <xsl:text>* </xsl:text>
        <xsl:call-template name="T_Node2Var"/>
        <xsl:text>;</xsl:text>
        <xsl:value-of select="$STR_Endl"/>

    <!-- Menus -->
    <xsl:for-each select=".//cli:menu[@name]">
        <xsl:call-template name="T_DeclareNode">
            <xsl:with-param name="I_IndentCount" select="$I_IndentOffset + 1"/>
        </xsl:call-template>
    </xsl:for-each>

    <!-- Sub-nodes -->
    <xsl:call-template name="T_DeclareSubNodes">
        <xsl:with-param name="I_IndentCount" select="$I_IndentOffset + 1"/>
    </xsl:call-template>

    <xsl:value-of select="$STR_Endl"/>
</xsl:template>

    <xsl:template name="T_DeclareSubNodes">
        <xsl:param name="I_IndentCount" select="0"/>

        <xsl:for-each select="cli:*">
        <xsl:if test="  not(self::cli:help)
                        and not(self::cli:cpp)
                        and not(self::cli:java)
                        and not(self::cli:handler)
                        and not(self::cli:menu[@name])">
            <xsl:call-template name="T_DeclareNode">
                <xsl:with-param name="I_IndentCount" select="$I_IndentCount"/>
            </xsl:call-template>
            <xsl:call-template name="T_DeclareSubNodes">
                <xsl:with-param name="I_IndentCount" select="$I_IndentCount + 1"/>
            </xsl:call-template>
        </xsl:if>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="T_DeclareNode">
        <xsl:param name="I_IndentCount" select="0"/>
        <xsl:param name="STR_Indent">
            <xsl:call-template name="T_Indent">
                <xsl:with-param name="I_IndentCount" select="$I_IndentCount"/>
            </xsl:call-template>
        </xsl:param>
        <xsl:variable name="STR_Class">
            <xsl:call-template name="T_Node2Class"/>
        </xsl:variable>
        <xsl:variable name="STR_Var">
            <xsl:call-template name="T_Node2Var"/>
        </xsl:variable>
        <xsl:variable name="STR_ParentVar">
            <xsl:for-each select="parent::cli:*">
                <xsl:call-template name="T_Node2Var"/>
            </xsl:for-each>
        </xsl:variable>

        <xsl:value-of select="$STR_Indent"/>
            <xsl:text>private: </xsl:text>
            <xsl:value-of select="$STR_Class"/>
            <xsl:text>* </xsl:text>
            <xsl:value-of select="$STR_Var"/>
            <xsl:text>;</xsl:text>
            <xsl:value-of select="$STR_Endl"/>

    </xsl:template>

<xsl:template name="T_MenuConstructor">
    <xsl:call-template name="T_Indent1"/>
        <xsl:text>// ----- Constructor -----</xsl:text>
        <xsl:value-of select="$STR_Endl"/>
    <xsl:call-template name="T_Indent1"/>
        <xsl:text>public: </xsl:text>
        <xsl:call-template name="T_Node2Class"/>
        <xsl:text>(void) :</xsl:text>
        <xsl:value-of select="$STR_Endl"/>
    <xsl:call-template name="T_Indent2"/>
        <xsl:choose>
        <xsl:when test="self::cli:cli">cli::Cli</xsl:when>
        <xsl:when test="self::cli:menu">cli::Menu</xsl:when>
        <xsl:otherwise>
            <xsl:call-template name="T_Error">
                <xsl:with-param name="STR_Message">no parent CLI class for element <xsl:value-of select="name()"/></xsl:with-param>
            </xsl:call-template>
        </xsl:otherwise>
        </xsl:choose>
        <xsl:text>(</xsl:text>
            <xsl:call-template name="T_CreateNodeParams"/>
        <xsl:text>)</xsl:text>
        <xsl:value-of select="$STR_Endl"/>
    <xsl:call-template name="T_Indent1"/>
        <xsl:text>{</xsl:text>
        <xsl:value-of select="$STR_Endl"/>

        <!-- Initialization -->
        <xsl:call-template name="T_Indent2"/>
            <xsl:call-template name="T_Node2Var"/><xsl:text> = this;</xsl:text>
            <xsl:value-of select="$STR_Endl"/>

        <!-- Create sub-menus -->
        <xsl:if test="self::cli:cli">
            <xsl:for-each select=".//menu[not(@ref)]">
                <xsl:call-template name="T_Indent2"/>
                    <xsl:text>// TBD: Create </xsl:text>
                    <xsl:call-template name="T_Node2Var"/>
                    <xsl:value-of select="$STR_Endl"/>
            </xsl:for-each>
        </xsl:if>
        <!-- Populate -->
        <xsl:if test="self::cli:cli">
            <xsl:call-template name="T_Indent2"/>
                <xsl:text>Populate();</xsl:text>
                <xsl:value-of select="$STR_Endl"/>
        </xsl:if>

    <xsl:call-template name="T_Indent1"/>
        <xsl:text>}</xsl:text><xsl:value-of select="$STR_Endl"/>
    <xsl:value-of select="$STR_Endl"/>
</xsl:template>

<xsl:template name="T_MenuDestructor">
    <xsl:call-template name="T_Indent1"/>
        <xsl:text>// ----- Destructor -----</xsl:text>
        <xsl:value-of select="$STR_Endl"/>
    <xsl:call-template name="T_Indent1"/>
        <xsl:text>public: virtual ~</xsl:text>
        <xsl:call-template name="T_Node2Class"/>
        <xsl:text>(void) {</xsl:text>
        <xsl:value-of select="$STR_Endl"/>
    <xsl:call-template name="T_Indent1"/>
        <xsl:text>}</xsl:text><xsl:value-of select="$STR_Endl"/>
    <xsl:value-of select="$STR_Endl"/>
</xsl:template>

<xsl:template name="T_MenuPopulate">
    <xsl:variable name="STR_Class"><xsl:call-template name="T_Node2Class"/></xsl:variable>
    <xsl:variable name="STR_Var"><xsl:call-template name="T_Node2Var"/></xsl:variable>
    <xsl:variable name="I_IndentOffset"><xsl:call-template name="T_IndentOffset"/></xsl:variable>

    <xsl:call-template name="T_Indent1"/>
        <xsl:text>// ----- Populate -----</xsl:text>
        <xsl:value-of select="$STR_Endl"/>
    <xsl:call-template name="T_Indent1"/><xsl:text>public: void Populate(void) {</xsl:text><xsl:value-of select="$STR_Endl"/>

    <!-- Menus -->
    <xsl:if test="self::cli:cli">
        <xsl:for-each select=".//cli:menu[@name]">
            <!-- Create the menu -->
            <xsl:call-template name="T_CreateNode">
                <xsl:with-param name="I_IndentCount" select="$I_IndentOffset + 2"/>
                <xsl:with-param name="B_WithCreateParams" select="0"/>
            </xsl:call-template>
            <!-- Populate it -->
            <xsl:call-template name="T_Indent2"/>
                <xsl:call-template name="T_Node2Var"/>
                <xsl:text>->Populate();</xsl:text>
                <xsl:value-of select="$STR_Endl"/>
        </xsl:for-each>
    </xsl:if>

    <!-- Sub-nodes -->
    <xsl:call-template name="T_CreateSubNodes">
        <xsl:with-param name="I_IndentCount" select="$I_IndentOffset + 2"/>
    </xsl:call-template>

    <xsl:call-template name="T_Indent1"/><xsl:text>}</xsl:text><xsl:value-of select="$STR_Endl"/>
    <xsl:value-of select="$STR_Endl"/>
</xsl:template>

    <xsl:template name="T_CreateSubNodes">
        <xsl:param name="I_IndentCount" select="0"/>

        <!-- Create tags first -->
        <xsl:for-each select="cli:tag[@id]">
            <xsl:call-template name="T_CreateNode">
                <xsl:with-param name="I_IndentCount" select="$I_IndentCount"/>
            </xsl:call-template>
        </xsl:for-each>
        <!-- Then other nodes -->
        <xsl:for-each select="cli:*">
        <xsl:if test="  not(self::cli:help)
                        and not(self::cli:cpp)
                        and not(self::cli:java)
                        and not(self::cli:handler)
                        and not(self::cli:menu[@name])
                        and not(self::cli:tag[@id])">
            <xsl:call-template name="T_CreateNode">
                <xsl:with-param name="I_IndentCount" select="$I_IndentCount"/>
            </xsl:call-template>
            <xsl:call-template name="T_CreateSubNodes">
                <xsl:with-param name="I_IndentCount" select="$I_IndentCount + 1"/>
            </xsl:call-template>
        </xsl:if>
        </xsl:for-each>
        <!-- Then tag contents -->
        <xsl:for-each select="cli:tag[@id]">
            <xsl:call-template name="T_CreateSubNodes">
                <xsl:with-param name="I_IndentCount" select="$I_IndentCount + 1"/>
            </xsl:call-template>
        </xsl:for-each>
    </xsl:template>

    <xsl:template name="T_CreateNode">
        <xsl:param name="I_IndentCount" select="0"/>
        <xsl:param name="B_WithCreateParams" select="1"/>
        <xsl:variable name="STR_Indent">
            <xsl:call-template name="T_Indent">
                <xsl:with-param name="I_IndentCount" select="$I_IndentCount"/>
            </xsl:call-template>
        </xsl:variable>
        <xsl:variable name="STR_Class">
            <xsl:call-template name="T_Node2Class"/>
        </xsl:variable>
        <xsl:variable name="STR_Var">
            <xsl:call-template name="T_Node2Var"/>
        </xsl:variable>
        <xsl:variable name="STR_ParentVar">
            <xsl:for-each select="parent::cli:*">
                <xsl:call-template name="T_Node2Var"/>
            </xsl:for-each>
        </xsl:variable>

        <xsl:value-of select="$STR_Indent"/>
            <xsl:if test="not(self::cli:tag[@ref]) and not(self::cli:menu[@ref])">
                <xsl:value-of select="$STR_Var"/>
                <xsl:text> = dynamic_cast&lt;</xsl:text>
                <xsl:value-of select="$STR_Class"/>
                <xsl:text>*&gt;(&amp; </xsl:text>
            </xsl:if>
                <xsl:value-of select="$STR_ParentVar"/>
                <xsl:choose>
                <xsl:when test="parent::cli:endl and self::cli:menu[@name]">
                    <xsl:text>->SetMenu(</xsl:text>
                </xsl:when>
                <xsl:when test="parent::cli:endl and self::cli:menu[@ref]">
                    <xsl:text>->SetMenuRef(</xsl:text>
                </xsl:when>
                <xsl:when test="parent::cli:cli and self::cli:menu[@name]">
                    <xsl:text>->AddMenu(</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>->AddElement(</xsl:text>
                </xsl:otherwise>
                </xsl:choose>
                    <xsl:text>new </xsl:text>
                    <xsl:value-of select="$STR_Class"/>
                    <xsl:text>(</xsl:text>
                        <xsl:if test="$B_WithCreateParams">
                            <xsl:call-template name="T_CreateNodeParams"/>
                        </xsl:if>
                    <xsl:text>)</xsl:text>
                <xsl:text>)</xsl:text>
            <xsl:if test="not(self::cli:tag[@ref]) and not(self::cli:menu[@ref])">
                <xsl:text>)</xsl:text>
            </xsl:if>
            <xsl:text>;</xsl:text>
            <xsl:value-of select="$STR_Endl"/>

    </xsl:template>

    <xsl:template name="T_CreateNodeParams">
        <xsl:variable name="STR_ElementRef">
            <xsl:choose>
            <xsl:when test="self::cli:tag[@ref]">
                <xsl:variable name="STR_Tag" select="@ref"/>
                <xsl:for-each select="//cli:tag[@id=$STR_Tag]">
                    <xsl:text>*</xsl:text><xsl:call-template name="T_Node2Var"/>
                </xsl:for-each>
            </xsl:when>
            <xsl:when test="self::cli:menu[@ref]">
                <xsl:variable name="STR_Menu" select="@ref"/>
                <xsl:for-each select="//cli:menu[@name=$STR_Menu]">
                    <xsl:text>*</xsl:text><xsl:call-template name="T_Node2Var"/>
                </xsl:for-each>
            </xsl:when>
            </xsl:choose>
            </xsl:variable>
        <xsl:variable name="B_ElementRef" select="string-length($STR_ElementRef)"/>
        <xsl:variable name="STR_Keyword">
            <xsl:choose>
            <xsl:when test="self::cli:cli or self::cli:menu">
                <xsl:value-of select="@name"/>
            </xsl:when>
            <xsl:when test="self::cli:keyword">
                <xsl:value-of select="@string"/>
            </xsl:when>
            </xsl:choose>
        </xsl:variable>
        <xsl:variable name="B_Keyword" select="string-length($STR_Keyword)"/>
        <xsl:variable name="B_Help">
            <xsl:choose>
            <xsl:when test="self::cli:tag">0</xsl:when>
            <xsl:when test="self::cli:menu[@ref]">0</xsl:when>
            <xsl:otherwise>1</xsl:otherwise>
            </xsl:choose>
        </xsl:variable>

        <xsl:choose>
        <xsl:when test="self::cli:tag[@id and @hollow='yes']">
            <xsl:text>true</xsl:text>
        </xsl:when>
        <xsl:when test="self::cli:tag[@id]">
            <xsl:text>false</xsl:text>
        </xsl:when>
        <xsl:when test="not($B_ElementRef=0)">
            <xsl:value-of select="$STR_ElementRef"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:if test="not($B_Keyword=0)">
                <xsl:text>"</xsl:text>
                <xsl:value-of select="$STR_Keyword"/>
                <xsl:text>"</xsl:text>
            </xsl:if>
            <xsl:if test="$B_Keyword and $B_Help">
                <xsl:text>, </xsl:text>
            </xsl:if>
            <xsl:if test="not($B_Help=0)">
                <xsl:text>cli::Help()</xsl:text>
                <xsl:for-each select="cli:help">
                    <xsl:variable name="STR_Lang">
                        <xsl:choose>
                        <xsl:when test="@lang='en'">
                            <xsl:text>cli::Help::LANG_EN</xsl:text>
                        </xsl:when>
                        <xsl:when test="@lang='fr'">
                            <xsl:text>cli::Help::LANG_FR</xsl:text>
                        </xsl:when>
                        </xsl:choose>
                    </xsl:variable>

                    <xsl:if test="string-length($STR_Lang) &gt; 0">
                        <xsl:text>.AddHelp(</xsl:text>
                            <xsl:value-of select="$STR_Lang"/>
                            <xsl:text>, </xsl:text>
                            <xsl:text>"</xsl:text>
                            <xsl:value-of select="."/>
                            <xsl:text>"</xsl:text>
                        <xsl:text>)</xsl:text>
                    </xsl:if>
                </xsl:for-each>
            </xsl:if>
        </xsl:otherwise>
        </xsl:choose>
    </xsl:template>


<xsl:template name="T_MenuExecute">
    <xsl:call-template name="T_Indent1"/>
        <xsl:text>// ----- Menu execution -----</xsl:text>
        <xsl:value-of select="$STR_Endl"/>

    <xsl:call-template name="T_ImplementMenu">
        <xsl:with-param name="STR_ParentClass" select="'cli::Cli'"/>
    </xsl:call-template>

    <xsl:value-of select="$STR_Endl"/>
</xsl:template>

    <xsl:template name="T_ImplementMenu">
        <xsl:param name="STR_ParentClass"/>
        <xsl:variable name="STR_Class">
            <xsl:call-template name="T_Node2Class"/>
        </xsl:variable>
        <xsl:variable name="I_IndentOffset">
            <xsl:call-template name="T_IndentOffset"/>
        </xsl:variable>

        <!-- Execution method -->
        <xsl:call-template name="T_Indent1"/>
        <xsl:text>public: virtual const bool Execute(const cli::CommandLine&amp; CLI_CmdLine) const {</xsl:text>
            <xsl:value-of select="$STR_Endl"/>

            <xsl:call-template name="T_Indent2"/>
                <!--<xsl:text>try {</xsl:text>-->
                <xsl:text>{</xsl:text>
                <xsl:value-of select="$STR_Endl"/>

            <!-- Trace -->
            <xsl:call-template name="T_Indent3"/>
                <xsl:text>static const cli::TraceClass CLI_EXECUTION(</xsl:text>
                    <xsl:text>"CLI_EXECUTION", </xsl:text>
                    <xsl:text>cli::Help()</xsl:text>
                        <xsl:text>.AddHelp(cli::Help::LANG_EN, "CLI Execution traces")</xsl:text>
                        <xsl:text>.AddHelp(cli::Help::LANG_FR, "Traces d'exécution du CLI")</xsl:text>
                <xsl:text>);</xsl:text>
                <xsl:value-of select="$STR_Endl"/>
            <xsl:call-template name="T_Indent3"/>
                <xsl:text>cli::GetTraces().Trace(CLI_EXECUTION) &lt;&lt; "</xsl:text>
                <xsl:call-template name="T_Node2Class"/><xsl:text>.Execute()</xsl:text>
                <xsl:text>";</xsl:text><xsl:value-of select="$STR_Endl"/>

            <!-- Step variables -->
            <xsl:call-template name="T_Indent3"/>
                <xsl:text>cli::CommandLineIterator cli_Elements(CLI_CmdLine);</xsl:text>
                <xsl:value-of select="$STR_Endl"/>
            <!--<xsl:call-template name="T_Indent3"/>
                <xsl:text>const cli::Element* cli_Element = NULL;</xsl:text>
                <xsl:value-of select="$STR_Endl"/>-->

            <!-- Call implementation on the menu object -->
            <xsl:call-template name="T_ImplementMenuExecution">
                <xsl:with-param name="I_IndentCount" select="$I_IndentOffset + 3"/>
            </xsl:call-template>

            <!-- Finishing -->
            <!--<xsl:call-template name="T_Indent2"/>
                <xsl:text>} catch (NoSuchElementException e1) {</xsl:text>
                <xsl:value-of select="$STR_Endl"/>-->
            <!--<xsl:call-template name="T_Indent3"/>
                <xsl:text>e1.printStackTrace();</xsl:text>
                <xsl:value-of select="$STR_Endl"/>-->
            <!--<xsl:call-template name="T_Indent2"/>
                <xsl:text>} catch (Exception e) {</xsl:text>
                <xsl:value-of select="$STR_Endl"/>
            <xsl:call-template name="T_Indent3"/>
                <xsl:text>e.printStackTrace();</xsl:text>
                <xsl:value-of select="$STR_Endl"/>-->
            <xsl:call-template name="T_Indent2"/>
                <xsl:text>}</xsl:text>
                <xsl:value-of select="$STR_Endl"/>
            <xsl:call-template name="T_Indent2"/>
                <xsl:text>return false;</xsl:text>
                <xsl:value-of select="$STR_Endl"/>

        <xsl:call-template name="T_Indent1"/>
            <xsl:text>}</xsl:text>
            <xsl:value-of select="$STR_Endl"/>
        <xsl:value-of select="$STR_Endl"/>
    </xsl:template>

    <xsl:template name="T_ImplementMenuExecution">
        <xsl:param name="I_IndentCount" select="0"/>
        <xsl:variable name="STR_Indent0">
            <xsl:call-template name="T_Indent">
                <xsl:with-param name="I_IndentCount" select="$I_IndentCount + 0"/>
            </xsl:call-template>
        </xsl:variable>
        <xsl:variable name="STR_Indent1">
            <xsl:call-template name="T_Indent">
                <xsl:with-param name="I_IndentCount" select="$I_IndentCount + 1"/>
            </xsl:call-template>
        </xsl:variable>
        <xsl:variable name="STR_Indent2">
            <xsl:call-template name="T_Indent">
                <xsl:with-param name="I_IndentCount" select="$I_IndentCount + 2"/>
            </xsl:call-template>
        </xsl:variable>

        <!-- Top label -->
        <xsl:value-of select="$STR_Indent0"/>
            <xsl:call-template name="T_Node2TopLabel"/>
            <xsl:text>: ;</xsl:text>
            <xsl:value-of select="$STR_Endl"/>

        <!-- Start the block -->
        <xsl:choose>
        <xsl:when test="self::cli:cli or self::cli:menu or self::cli:tag[@ref]">
            <xsl:value-of select="$STR_Indent0"/>
            <xsl:text>{</xsl:text>
                <xsl:value-of select="$STR_Endl"/>
        </xsl:when>
        <xsl:when test="self::cli:tag[@id]">
            <xsl:value-of select="$STR_Indent0"/>
            <xsl:text>do {</xsl:text>
                <xsl:value-of select="$STR_Endl"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="$STR_Indent0"/>
            <xsl:text>if (cli_Elements == *</xsl:text><xsl:call-template name="T_Node2Var"/><xsl:text>) {</xsl:text>
                <xsl:value-of select="$STR_Endl"/>
        </xsl:otherwise>
        </xsl:choose>

        <!-- Step it -->
        <xsl:if test="not(self::cli:tag or self::cli:endl)">
            <xsl:value-of select="$STR_Indent1"/>
                <xsl:text>if (! cli_Elements.StepIt()) return false;</xsl:text>
                <xsl:value-of select="$STR_Endl"/>
        </xsl:if>

        <!-- Trace current keyword -->
        <xsl:value-of select="$STR_Indent1"/>
            <xsl:text>cli::GetTraces().Trace(CLI_EXECUTION) </xsl:text>
            <xsl:text>&lt;&lt; "word = " &lt;&lt; (*cli_Elements)->GetKeyword();</xsl:text>
            <xsl:value-of select="$STR_Endl"/>

        <!-- Execution -->
        <xsl:for-each select="cli:cpp[not(@*)]">
            <xsl:value-of select="$STR_Indent1"/>
                <xsl:apply-templates select="."/>
                <xsl:value-of select="$STR_Endl"/>
        </xsl:for-each>

        <!-- Sub-elements -->
        <xsl:call-template name="T_SubElements">
            <xsl:with-param name="I_IndentCount" select="$I_IndentCount + 1"/>
        </xsl:call-template>

        <!-- Final jump -->
        <xsl:choose>
        <xsl:when test="self::cli:tag[@id]">
            <xsl:value-of select="$STR_Indent1"/>
                <xsl:text>goto </xsl:text>
                <xsl:call-template name="T_Node2EndLabel"/>
                <xsl:text>;</xsl:text>
                <xsl:value-of select="$STR_Endl"/>
        </xsl:when>
        <xsl:when test="self::cli:tag[@ref]"></xsl:when>
        <xsl:when test="self::cli:endl"></xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="$STR_Indent1"/>
                <xsl:text>return false;</xsl:text>
                <xsl:value-of select="$STR_Endl"/>
        </xsl:otherwise>
        </xsl:choose>

        <!-- End the block -->
        <xsl:choose>
        <xsl:when test="self::cli:tag[@id]">
            <xsl:value-of select="$STR_Indent0"/>
                <xsl:text>} while(true);</xsl:text>
                <xsl:value-of select="$STR_Endl"/>
        </xsl:when>
        <xsl:otherwise>
            <xsl:value-of select="$STR_Indent0"/>
                <xsl:text>}</xsl:text>
                <xsl:value-of select="$STR_Endl"/>
        </xsl:otherwise>
        </xsl:choose>

        <!-- End label -->
        <xsl:value-of select="$STR_Indent0"/>
            <xsl:call-template name="T_Node2EndLabel"/>
            <xsl:text>: ;</xsl:text>
            <xsl:value-of select="$STR_Endl"/>

    </xsl:template>

    <xsl:template name="T_SubElements">
        <xsl:param name="I_IndentCount" select="0"/>
        <xsl:param name="B_Implement" select="1"/>

        <xsl:variable name="STR_Indent">
            <xsl:call-template name="T_Indent">
                <xsl:with-param name="I_IndentCount" select="$I_IndentCount"/>
            </xsl:call-template>
        </xsl:variable>

        <xsl:choose>
        <xsl:when test="self::cli:endl">
            <xsl:value-of select="$STR_Indent"/>
                <xsl:text>return true;</xsl:text>
                <xsl:value-of select="$STR_Endl"/>
        </xsl:when>
        <xsl:when test="self::cli:tag[@ref]">
            <xsl:variable name="STR_Tag" select="@ref"/>

            <xsl:choose>
            <xsl:when test="ancestor::cli:tag[@id=$STR_Tag]">
                <!-- The referenced tag is an ancestor -->
                <!-- Use a 'continue' statement to avoid inifinite loop generations -->
                <xsl:for-each select="ancestor::cli:tag[@id=$STR_Tag]">
                    <xsl:call-template name="T_SubElements">
                        <xsl:with-param name="I_IndentCount" select="$I_IndentCount"/>
                        <xsl:with-param name="B_Implement" select="0"/>
                    </xsl:call-template>
                </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
                <!-- The referenced tag is not an ancestor -->
                <!-- Implementation is required here -->
                <xsl:for-each select="//cli:tag[@id=$STR_Tag]">
                    <xsl:call-template name="T_SubElements">
                        <xsl:with-param name="I_IndentCount" select="$I_IndentCount"/>
                        <xsl:with-param name="B_Implement" select="0"/>
                    </xsl:call-template>
                </xsl:for-each>
            </xsl:otherwise>
            </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
            <xsl:variable name="STR_ParentTopLabel">
                <xsl:call-template name="T_Node2TopLabel"/>
            </xsl:variable>
            <xsl:variable name="STR_ParentEndLabel">
                <xsl:call-template name="T_Node2EndLabel"/>
            </xsl:variable>
            <xsl:for-each select="cli:keyword|cli:param|cli:tag|cli:endl">
                <xsl:choose>
                <xsl:when test="$B_Implement">
                    <xsl:call-template name="T_ImplementMenuExecution">
                        <xsl:with-param name="I_IndentCount" select="$I_IndentCount"/>
                    </xsl:call-template>
                </xsl:when>
                <xsl:otherwise>
                    <!-- No implementation -->
                    <xsl:choose>
                    <xsl:when test="self::cli:tag[@ref]">
                        <xsl:call-template name="T_SubElements">
                            <xsl:with-param name="I_IndentCount" select="$I_IndentCount"/>
                            <xsl:with-param name="B_Implement" select="$B_Implement"/>
                        </xsl:call-template>
                    </xsl:when>
                    <xsl:when test="self::cli:param">
                        <xsl:value-of select="$STR_Indent"/>
                            <xsl:text>if (cli_Elements == *</xsl:text>
                            <xsl:call-template name="T_Node2Var"/><xsl:text>) </xsl:text>
                        <xsl:text>goto </xsl:text>
                            <xsl:value-of select="$STR_ParentTopLabel"/>
                            <xsl:text>;</xsl:text>
                            <xsl:value-of select="$STR_Endl"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="$STR_Indent"/>
                            <xsl:text>if (cli_Elements == *</xsl:text>
                            <xsl:call-template name="T_Node2Var"/><xsl:text>) </xsl:text>
                        <xsl:text>goto </xsl:text>
                            <xsl:value-of select="$STR_ParentTopLabel"/>
                            <xsl:text>;</xsl:text>
                            <xsl:value-of select="$STR_Endl"/>
                    </xsl:otherwise>
                    </xsl:choose>
                </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </xsl:otherwise>
        </xsl:choose>

    </xsl:template>

    <xsl:template name="T_MenuHandlers">    
        <xsl:param name="STR_ParentClass"/>
        <xsl:variable name="STR_Class">
            <xsl:call-template name="T_Node2Class"/>
        </xsl:variable>

        <!-- Exit handler -->
        <xsl:call-template name="T_Indent1"/>
            <xsl:text>public: virtual void OnExit(void) const {</xsl:text>
            <xsl:value-of select="$STR_Endl"/>
        <xsl:for-each select="cli:handler[@name='exit']">
            <xsl:call-template name="T_Indent2"/>
            <xsl:apply-templates select="cli:cpp"/>
        </xsl:for-each>
        <xsl:call-template name="T_Indent1"/>
            <xsl:text>}</xsl:text>
            <xsl:value-of select="$STR_Endl"/>
        <xsl:value-of select="$STR_Endl"/>
    </xsl:template>

<xsl:template name="T_NodeCreation">
    <xsl:variable name="STR_Class"><xsl:call-template name="T_Node2Class" select="/cli:cli"/></xsl:variable>
    <xsl:variable name="STR_Var"><xsl:call-template name="T_Node2Var" select="/cli:cli"/></xsl:variable>

    <xsl:text>// ----- Node creation -----</xsl:text>
        <xsl:value-of select="$STR_Endl"/>

    <!-- CLI object creation -->
    <xsl:if test="$B_CliStaticCreation">
        <xsl:value-of select="$STR_Class"/>
            <xsl:text> </xsl:text>
            <xsl:value-of select="$STR_Var"/>
            <xsl:text>;</xsl:text>
            <xsl:value-of select="$STR_Endl"/>

        <xsl:if test="/cli:cli/@cpp">
            <xsl:text>cli::Cli* </xsl:text>
                <xsl:value-of select="/cli:cli/@cpp"/>
                <xsl:text> = &amp; </xsl:text>
                <xsl:value-of select="$STR_Var"/>
                <xsl:text>;</xsl:text>
                <xsl:value-of select="$STR_Endl"/>
        </xsl:if>
    </xsl:if>

    <xsl:value-of select="$STR_Endl"/>
</xsl:template>

<xsl:template name="T_Node2Var">
    <!-- variable prefix -->
    <xsl:value-of select="$STR_VarPrefix"/>

    <!-- element type -->
    <xsl:choose>
    <xsl:when test="self::cli:tag[@ref]"><xsl:text>tagref</xsl:text></xsl:when>
    <xsl:when test="self::cli:menu[@ref]"><xsl:text>menuref</xsl:text></xsl:when>
    <xsl:otherwise>
        <xsl:call-template name="T_MkCppName">
            <xsl:with-param name="STR_String" select="local-name(.)"/>
        </xsl:call-template>
    </xsl:otherwise>
    </xsl:choose>

    <!-- element name -->
    <xsl:choose>
    <xsl:when test="self::cli:keyword">
        <xsl:text>_</xsl:text>
        <xsl:call-template name="T_MkCppName">
            <xsl:with-param name="STR_String" select="@string"/>
        </xsl:call-template>
    </xsl:when>
    <xsl:when test="self::cli:param">
        <xsl:text>_</xsl:text>
        <xsl:call-template name="T_MkCppName">
            <xsl:with-param name="STR_String" select="@id"/>
        </xsl:call-template>
    </xsl:when>
    </xsl:choose>

    <!-- id -->
    <xsl:text>_</xsl:text>
    <xsl:value-of select="generate-id(.)"/>
</xsl:template>

<xsl:template name="T_Node2Class">
    <xsl:choose>
    <xsl:when test="self::cli:cli">
        <xsl:value-of select="$STR_CliClassName"/>
    </xsl:when>
    <xsl:when test="self::cli:menu[@name]">
        <xsl:value-of select="$STR_ClassPrefix"/>
        <xsl:call-template name="T_MkCppName">
            <xsl:with-param name="STR_String" select="@name"/>
        </xsl:call-template>
    </xsl:when>
    <xsl:when test="self::cli:keyword"><xsl:text>cli::Keyword</xsl:text></xsl:when>
    <xsl:when test="self::cli:param">
        <xsl:choose>
        <xsl:when test="@type='string'"><xsl:text>cli::ParamString</xsl:text></xsl:when>
        <xsl:when test="@type='int'"><xsl:text>cli::ParamInt</xsl:text></xsl:when>
        <xsl:when test="@type='float'"><xsl:text>cli::ParamFloat</xsl:text></xsl:when>
        <xsl:when test="@type='host'"><xsl:text>cli::ParamHost</xsl:text></xsl:when>
        <xsl:when test="not(@type)">
            <xsl:call-template name="T_Error">
                <xsl:with-param name="STR_Message">missing @type attribute</xsl:with-param>
            </xsl:call-template>
        </xsl:when>
        <xsl:otherwise>
            <xsl:call-template name="T_Error">
                <xsl:with-param name="STR_Message">unknown param type '<xsl:value-of select="@type"/>'</xsl:with-param>
            </xsl:call-template>
        </xsl:otherwise>
        </xsl:choose>
    </xsl:when>
    <xsl:when test="self::cli:endl"><xsl:text>cli::Endl</xsl:text></xsl:when>
    <xsl:when test="self::cli:tag[@id]"><xsl:text>cli::SyntaxTag</xsl:text></xsl:when>
    <xsl:when test="self::cli:tag[@ref]"><xsl:text>cli::SyntaxRef</xsl:text></xsl:when>
    <xsl:when test="self::cli:menu[@ref]"><xsl:text>cli::MenuRef</xsl:text></xsl:when>
    <xsl:otherwise>
        <xsl:call-template name="T_Error">
            <xsl:with-param name="STR_Message">unknown cli node '<xsl:value-of select="local-name(.)"/>'</xsl:with-param>
        </xsl:call-template>
    </xsl:otherwise>
    </xsl:choose>
</xsl:template>

<xsl:template name="T_Node2TopLabel">
    <xsl:call-template name="T_Node2Var"/>
    <xsl:text>_top_lbl</xsl:text>
</xsl:template>

<xsl:template name="T_Node2EndLabel">
    <xsl:call-template name="T_Node2Var"/>
    <xsl:text>_end_lbl</xsl:text>
</xsl:template>

<xsl:template name="T_Indent0">
    <xsl:variable name="I_Offset"><xsl:call-template name="T_IndentOffset"/></xsl:variable>
    <xsl:call-template name="T_Indent"><xsl:with-param name="I_IndentCount" select="$I_Offset + 0"/></xsl:call-template>
</xsl:template>
<xsl:template name="T_Indent1">
    <xsl:variable name="I_Offset"><xsl:call-template name="T_IndentOffset"/></xsl:variable>
    <xsl:call-template name="T_Indent"><xsl:with-param name="I_IndentCount" select="$I_Offset + 1"/></xsl:call-template>
</xsl:template>
<xsl:template name="T_Indent2">
    <xsl:variable name="I_Offset"><xsl:call-template name="T_IndentOffset"/></xsl:variable>
    <xsl:call-template name="T_Indent"><xsl:with-param name="I_IndentCount" select="$I_Offset + 2"/></xsl:call-template>
</xsl:template>
<xsl:template name="T_Indent3">
    <xsl:variable name="I_Offset"><xsl:call-template name="T_IndentOffset"/></xsl:variable>
    <xsl:call-template name="T_Indent"><xsl:with-param name="I_IndentCount" select="$I_Offset + 3"/></xsl:call-template>
</xsl:template>

    <xsl:template name="T_IndentOffset">
        <xsl:choose>
        <xsl:when test="self::cli:cli">0</xsl:when>
        <xsl:otherwise>1</xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template name="T_Indent">
        <xsl:param name="I_IndentCount" select="0"/>

        <xsl:if test="$I_IndentCount &gt; 0">
            <xsl:value-of select="$STR_Indent"/>
            <xsl:call-template name="T_Indent">
                <xsl:with-param name="I_IndentCount" select="$I_IndentCount - 1"/>
            </xsl:call-template>
        </xsl:if>
    </xsl:template>

<xsl:template match="cli:cpp">
    <xsl:apply-templates/>
    <xsl:value-of select="$STR_Endl"/>
</xsl:template>

<xsl:template match="cli:value-of[@param]">
    <xsl:variable name="STR_Param" select="@param"/>
    <xsl:for-each select="ancestor::cli:param[@id=$STR_Param][position()=1]">
        <xsl:text>(*</xsl:text><xsl:call-template name="T_Node2Var"/><xsl:text>)</xsl:text>
    </xsl:for-each>
</xsl:template>
<xsl:template match="cli:out">
    <xsl:text>GetOutputStream()</xsl:text>
</xsl:template>
<xsl:template match="cli:err">
    <xsl:text>GetErrorStream()</xsl:text>
</xsl:template>

<xsl:template name="T_MkCppName">
    <xsl:param name="STR_String"/>
    <xsl:value-of select="
        translate(  translate(  translate(  translate(  translate(  translate(  translate(
        translate(  translate(  translate(
        $STR_String,
        ':','_'),   '&lt;','_'),'&gt;','_'),'*', '_'),  '|', '_'),  '+', '_'),  '-', '_'),
        '(', '_'),  ')', '_'),  '#','_')"/>
</xsl:template>

<xsl:template name="T_Error">
    <xsl:param name="STR_Message"/>

    <xsl:message terminate="yes">
        <!--<xsl:value-of select=""/><xsl:text>:</xsl:text>
        <xsl:value-of select=""/><xsl:text>: </xsl:text>-->
        <xsl:text>Error: </xsl:text>
        <xsl:value-of select="$STR_Message"/>
        <xsl:value-of select="$STR_Endl"/>
    </xsl:message>
</xsl:template>

</xsl:stylesheet>

